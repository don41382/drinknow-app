
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async alertLogClientError(title: string, message: string, error: string) : Promise<void> {
    await TAURI_INVOKE("alert_log_client_error", { title, message, error });
},
async getCurrentTimerStatus() : Promise<TimerStatus> {
    return await TAURI_INVOKE("get_current_timer_status");
},
async toggleTimer() : Promise<void> {
    await TAURI_INVOKE("toggle_timer");
},
async timerChange(changeTime: ChangeTime) : Promise<void> {
    await TAURI_INVOKE("timer_change", { changeTime });
},
async feedbackWindowSendFeedback(feedback: string, rating: FeedbackRate) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("feedback_window_send_feedback", { feedback, rating }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateSettings(settings: SettingsUserDetails) : Promise<null> {
    return await TAURI_INVOKE("update_settings", { settings });
},
async startSession() : Promise<null> {
    return await TAURI_INVOKE("start_session");
},
async startFirstSession(nextBreakDurationMinutes: number, enableOnStartup: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_first_session", { nextBreakDurationMinutes, enableOnStartup }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadSessionDetails() : Promise<SessionDetail | null> {
    return await TAURI_INVOKE("load_session_details");
},
async endSession(reason: SessionEndingReason) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("end_session", { reason }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openSettings() : Promise<null> {
    return await TAURI_INVOKE("open_settings");
},
async loadSettings() : Promise<Settings> {
    return await TAURI_INVOKE("load_settings");
},
async openBrowser(url: string) : Promise<null> {
    return await TAURI_INVOKE("open_browser", { url });
},
async closeErrorWindow() : Promise<void> {
    await TAURI_INVOKE("close_error_window");
},
async updaterClose() : Promise<void> {
    await TAURI_INVOKE("updater_close");
},
async settingsRegisterLicense(licenseKey: string) : Promise<LicenseInfo> {
    return await TAURI_INVOKE("settings_register_license", { licenseKey });
},
async settingsResetLicense() : Promise<LicenseInfo> {
    return await TAURI_INVOKE("settings_reset_license");
},
async getALicense() : Promise<null> {
    return await TAURI_INVOKE("get_a_license");
}
}

/** user-defined events **/


export const events = __makeEvents__<{
countdownEvent: CountdownEvent,
licenseResult: LicenseResult,
sessionEndingReason: SessionEndingReason,
sessionStartEvent: SessionStartEvent,
settings: Settings,
settingsUserDetails: SettingsUserDetails,
timerStatus: TimerStatus
}>({
countdownEvent: "countdown-event",
licenseResult: "license-result",
sessionEndingReason: "session-ending-reason",
sessionStartEvent: "session-start-event",
settings: "settings",
settingsUserDetails: "settings-user-details",
timerStatus: "timer-status"
})

/** user-defined constants **/



/** user-defined types **/

export type AppDetails = { version: string; license_info: LicenseInfo }
export type ChangeTime = { Add: number } | { Remove: number }
export type CountdownEvent = { status: TimerStatus }
export type Exercise = { id: SessionId; title: string; description: string; advices: string[]; duration_s: number; active: boolean }
export type FeedbackRate = "UNKNOWN" | "BAD" | "OK" | "AWESOME"
export type LicenseInfo = { status: LicenseInfoStatus; license_key: string | null; message: string | null }
export type LicenseInfoStatus = "Trail" | "Paid" | "Full" | "Invalid"
export type LicenseResult = { status: LicenseResultStatus; error: string | null }
export type LicenseResultStatus = "Success" | "Error"
export type PauseOrigin = "Idle" | { PreventSleep: string } | "User"
export type SessionDetail = { exercise: Exercise; license_info: LicenseInfo }
export type SessionEndingReason = "EndOfTime" | "UserEscape" | "Error"
export type SessionId = string
export type SessionStartEvent = { details: SessionDetail }
export type Settings = { app: AppDetails; user: SettingsUserDetails; selected_tab: SettingsTabs }
export type SettingsTabs = "Session" | "Tracking" | "License" | "About"
export type SettingsUserDetails = { next_break_duration_minutes: number; active: boolean; allow_tracking: boolean; enable_on_startup: boolean; enable_idle_detection?: boolean }
export type TimerStatus = { NotStarted: number } | { Active: number } | { Paused: [PauseOrigin, number] } | "Finished"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
