name: "publish"

on:
  push:
    branches:
      - main
      - develop

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: "self-hosted-macos"
            os: macos
            self-hosted: true
            arch: aarch64
            args: "--target universal-apple-darwin"
            enable: true
            appstore: false
          - runs-on: "self-hosted-macos"
            os: macos
            self-hosted: true
            arch: aarch64
            args: "--target universal-apple-darwin"
            enable: true
            appstore: true
          - runs-on: "self-hosted-windows"
            os: windows
            self-hosted: true
            arch: x64-windows
            args: "--target x86_64-pc-windows-msvc"
            enabled: true
            appstore: false
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      SIGNTOOL_PATH: 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe'

    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        run: npm install -g pnpm

      - name: install Rust stable
        if: matrix.os == 'macos'
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.arch == 'aarch64' && 'aarch64-apple-darwin,x86_64-apple-darwin' || ' x86_64-pc-windows-msvc' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        if: ${{ !matrix.self-hosted }}
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        run: pnpm install

      - name: check svelte / typescript
        run: pnpm check

      - name: install signtool (windows)
        if: matrix.os == 'windows'
        run:
          curl https://github.com/Levminer/trusted-signing-cli/releases/download/0.3.0/trusted-signing-cli.exe -o trusted-signing-cli.exe

      - name: Decode Apple Private API key to file (macos)
        if: matrix.os == 'macos'
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          mkdir -p $HOME/private_keys
          echo "${{ secrets.APPLE_PRIVATE_API_KEY }}" | base64 --decode > $HOME/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          echo "APPLE_API_KEY_PATH=$HOME/private_keys/AuthKey_$APPLE_API_KEY_ID.p8" >> $GITHUB_ENV

      - name: Decode Apple Provision Profile to file (macos)
        if: matrix.os == 'macos'
        run: |
          echo "${{ secrets.APPLE_PROVISION_FILE }}" | base64 --decode > $GITHUB_WORKSPACE/src-tauri/macos_profile.provisionprofile

      - name: Set release name
        shell: bash
        run: echo "RELEASE_NAME=$(if [[ '${{ github.ref_name }}' == 'develop' ]]; then echo '__VERSION__-beta'; else echo '__VERSION__'; fi)" >> $GITHUB_ENV

      - name: Install Tauri CLI
        if: matrix.os == 'windows'
        run: cargo install --locked --git https://github.com/don41382/tauri.git --branch installer-name-missing-fix tauri-cli

      - uses: tauri-apps/tauri-action@v0
        if: matrix.appstore == false
        env:
          GITHUB_TOKEN: ${{ secrets.MINUTE_MOTION_RELEASE_REPO_GITHUB_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: "Developer ID Application: Felix Eckhardt (LXYUBHT3K4)"
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        with:
          tauriScript: "cargo tauri"
          tagName: v${{env.RELEASE_NAME}} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: ${{env.RELEASE_NAME}}
          releaseBody: "See the assets to download this version and install for ${{env.RELEASE_NAME}}"
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          releaseCommitish: ${{ github.ref_name }}
          owner: "don41382"
          repo: "justdrink-app-releases"
          args: ${{ matrix.args }}

      - name: bundle & build for app-store mac
        if: matrix.appstore == true && matrix.os == 'macos'
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: "Apple Distribution: Felix Eckhardt (LXYUBHT3K4)"
        run: |
          cd $GITHUB_WORKSPACE
          pnpm run tauri build --target universal-apple-darwin --features "fullversion default" --config src-tauri/tauri.appstore.conf.json

      - name: generate and upload installer package
        if: matrix.appstore == true && matrix.os == 'macos'
        env:
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_SIGNING_IDENTITY: "3rd Party Mac Developer Installer: Felix Eckhardt (LXYUBHT3K4)"
        run: |
          APP_PATH="src-tauri/target/universal-apple-darwin/release/bundle/macos/Just Drink!.app"
          xcrun productbuild --sign "$APPLE_SIGNING_IDENTITY" --component "$APP_PATH" /Applications "Just Drink!.pkg"
          xcrun altool --upload-app --type macos --file "Just Drink!.pkg" --apiKey "$APPLE_API_KEY_ID" --apiIssuer $APPLE_API_ISSUER

      - name: Cleanup
        if: matrix.os == 'macos' && (success() || failure())
        run: |
          # rm -r $HOME/private_keys
          if [ -n "${{ env.APPLE_API_KEY_PATH }}" ] && [ -f "${{ env.APPLE_API_KEY_PATH }}" ]; then
            rm "${{ env.APPLE_API_KEY_PATH }}"
          fi