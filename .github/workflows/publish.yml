name: "publish"

on:
  push:
    branches:
      - master

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: "self-hosted-macos"
            os: macos
            self-hosted: true
            arch: aarch64
            args: "--target universal-apple-darwin --bundles app --args '--keychain build.keychain'"
            enable: true
          # - runs-on: "self-hosted-windows"
          #  os: windows
          #  self-hosted: true
          #  arch: x64-windows
          #  args: "--target x86_64-pc-windows-msvc"
          #  enabled: true
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      SIGNTOOL_PATH: 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe'

    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        run: npm install -g pnpm

      - name: install Rust stable
        if: matrix.os == 'macos'
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.arch == 'aarch64' && 'aarch64-apple-darwin,x86_64-apple-darwin' || ' x86_64-pc-windows-msvc' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        if: ${{ !matrix.self-hosted }}
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        run: pnpm install

      - name: Create videos directory and download videos
        run: |
          mkdir src-tauri/videos
          curl https://storage.googleapis.com/motion-minute-download/videos/v2.zip -o v2.zip
          tar -xf v2.zip -C src-tauri/videos
          rm v2.zip # clean up the zip file

      - name: install signtool (windows)
        if: matrix.os == 'windows'
        run:
          curl https://github.com/Levminer/trusted-signing-cli/releases/download/0.3.0/trusted-signing-cli.exe -o trusted-signing-cli.exe

      # Apple Certification
      - name: Import Apple Developer Certificate (macos)
        if: matrix.os == 'macos'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate (macos)
        if: matrix.os == 'macos'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Decode Apple Private API key to file (macos)
        if: matrix.os == 'macos'
        run: |
          echo "${{ secrets.APPLE_PRIVATE_API_KEY }}" | base64 --decode > $HOME/apple_private_api_key.p8
          echo "APPLE_API_KEY_PATH=$HOME/apple_private_api_key.p8" >> $GITHUB_ENV

      - name: Decode Apple Provision Profile to file (macos)
        if: matrix.os == 'macos'
        run: |
          echo "${{ secrets.APPLE_PROVISION_FILE }}" | base64 --decode > $GITHUB_WORKSPACE/src-tauri/Motion_Minute_MacOS_Profile.provisionprofile

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.MINUTE_MOTION_RELEASE_REPO_GITHUB_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.CERT_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          releaseCommitish: "main"
          owner: "don41382"
          repo: "motion-minute-app-releases"
          args: ${{ matrix.args }}

      - name: Cleanup
        if: matrix.os == 'macos' && (success() || failure())
        run: |
          security delete-keychain build.keychain || true
          if [ -n "${{ env.APPLE_API_KEY_PATH }}" ] && [ -f "${{ env.APPLE_API_KEY_PATH }}" ]; then
            rm "${{ env.APPLE_API_KEY_PATH }}"
          fi